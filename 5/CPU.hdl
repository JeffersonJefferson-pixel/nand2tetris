// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=outALU, sel=instruction[15], out=out0);
    Not(in=instruction[15], out=isA);
    And(a=instruction[15], b=instruction[5], out=isCAndLoadA);
    Or(a=isCAndLoadA, b=isA, out=loadA);
    ARegister(in=out0, load=loadA, out=outA, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);
    Mux16(a=outA, b=inM, sel=instruction[12], out=out1);
    ALU(x=outD, y=out1, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zrALU, ng=ngALU);
    Or(a=zrALU, b=ngALU, out=zrOrNG);
    Not(in=zrOrNG, out=notZrOrNg);
    And(a=instruction[0], b=notZrOrNg, out=jumpGT);
    And(a=instruction[1], b=zrALU, out=jumpEQ);
    And(a=instruction[2], b=ngALU, out=jumpLT);
    Or(a=jumpGT, b=jumpEQ, out=jump0);
    Or(a=jump0, b=jumpLT, out=jump1);
    And(a=instruction[15], b=jump1, out=jump2);
    PC(in=outA, inc=true, load=jump2, reset=reset, out[0..14]=pc);
    And(a=instruction[15], b=instruction[3], out=writeM);
}